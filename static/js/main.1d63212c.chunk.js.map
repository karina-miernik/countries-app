{"version":3,"sources":["components/Styling.module.css","components/Nav.js","components/PageWrapper.js","components/CountriesItem.js","components/Loader.js","components/Form.js","components/Countries.js","components/MainPage.js","components/CountriesDetails.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","styles","nav","to","link","PageWrapper","children","wrapper","CountriesItem","title","capital","img","id","Card","style","width","countryItem","Img","variant","src","Body","Title","Text","countryButtonWrapper","countryButton","Loader","Spinner","animation","Form","filter","onFormChange","formWrapper","FormControl","form","placeholder","aria-label","onChange","e","target","value","Countries","useState","countries","setCountries","isLoading","setIsLoading","text","setText","useEffect","fetch","then","r","json","arrayCountries","Object","keys","map","key","formContainer","country","name","toLowerCase","includes","flag","MainPage","countriesWrapper","CountriesDetails","useParams","setCountry","console","log","container","borderButton","margin","toString","countryWrapper","countryImgWrapper","alt","countryRightWrapper","countryTitle","countryTxtWrapper","countryFirstCol","nativeName","region","countrySecCol","currencies","courency","padding","languages","language","borders","border","Content","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d63212c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Styling_nav__3xe1-\",\"link\":\"Styling_link__cNeK3\",\"formContainer\":\"Styling_formContainer__3YJYQ\",\"formWrapper\":\"Styling_formWrapper__lNv5c\",\"wrapper\":\"Styling_wrapper__Ob5vH\",\"countries\":\"Styling_countries__2-czv\",\"countriesWrapper\":\"Styling_countriesWrapper__1rlZN\",\"countryItem\":\"Styling_countryItem__13ZU6\",\"countryButtonWrapper\":\"Styling_countryButtonWrapper__2NcQO\",\"countryButton\":\"Styling_countryButton__1NtLL\",\"countryWrapper\":\"Styling_countryWrapper__3Goz5\",\"countryImgWrapper\":\"Styling_countryImgWrapper__1QQNn\",\"countryTitle\":\"Styling_countryTitle__2FHoc\",\"countryTxtWrapper\":\"Styling_countryTxtWrapper__15XIq\",\"countryFirstCol\":\"Styling_countryFirstCol__nvWKT\",\"countrySecCol\":\"Styling_countrySecCol__13zoi\",\"borderButton\":\"Styling_borderButton__2eF94\",\"container\":\"Styling_container__qQtEA\",\"form\":\"Styling_form__HXMTl\"};","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./Styling.module.css\";\nconst Nav = () => {\n  return (\n    <nav className={styles.nav}>\n      <Link to={`/countries-app`} className={styles.link}>\n        Find a country\n      </Link>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport styles from \"./Styling.module.css\";\nconst PageWrapper = ({ children }) => {\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nexport default PageWrapper;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport styles from \"./Styling.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst CountriesItem = ({ title, capital, img, id }) => {\n\n  return (\n    <Card style={{ width: \"18rem\" }} className={styles.countryItem}>\n      <Link to={`/countries-app/${id}`} className={styles.link}>\n        <Card.Img variant=\"top\" src={img} />\n      </Link>\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Card.Text>Capital: {capital}</Card.Text>\n        <div className={styles.countryButtonWrapper}>\n          <Link to={`/countries-app/${id}`} className={styles.link}>\n            <button className={styles.countryButton}>More</button>\n          </Link>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CountriesItem;\n","import React from 'react'\nimport Spinner from 'react-bootstrap/Spinner'\n\nconst Loader = () => {\n    return <>\n      <Spinner animation=\"border\" variant=\"info\" />\n    </>\n}\n\nexport default Loader","import React, { useState } from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport styles from \"./Styling.module.css\";\n\nconst Form = ({ filter, onFormChange }) => {\n\n  const handleOnChange = (e) => {\n    onFormChange(e.target.value)\n  }\n\n\n  return (\n    <>\n      <div className={styles.formWrapper}>\n        <FormControl className={styles.form}\n          placeholder=\"Search...\"\n          aria-label=\"Search...\"\n          onChange={handleOnChange}\n          value={filter}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from \"react\";\nimport CountriesItem from \"./CountriesItem\";\nimport Loader from './Loader'\nimport Form from './Form'\nimport styles from \"./Styling.module.css\";\n\nconst Countries = () => {\n  const [countries, setCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true)\n  const [text, setText] = useState('')\n\n  useEffect(() => {\n    fetch(\"https://restcountries.com/v2/all\")\n      .then((r) => r.json())\n      .then((countries) => {\n        const arrayCountries = countries\n          ? Object.keys(countries).map((key) => {\n            return {\n              id: key,\n              ...countries[key],\n            }\n          })\n          : []\n        setCountries(arrayCountries);\n        setIsLoading(false)\n      });\n  }, []);\n\n  const handleOnFormChange = (text) => {\n    setText(text)\n  }\n  return (\n    <>\n      <div className={styles.formContainer}>\n        <Form\n          filter={text}\n          onFormChange={handleOnFormChange}\n          value={text}\n        />\n      </div>\n\n      {\n        isLoading\n          ? <Loader />\n\n          : countries\n\n            .filter(country => {\n              return country.name.toLowerCase()\n                .includes(text.toLowerCase());\n\n            })\n            .map((country) => {\n              return (\n                <CountriesItem\n                  title={country.name}\n                  capital={country.capital}\n                  img={country.flag}\n                  key={country.id}\n                  id={country.id}\n                />\n\n              );\n            })\n\n\n      }\n    </>\n  );\n};\n\nexport default Countries;\n","import React from \"react\";\n\nimport PageWrapper from \"./PageWrapper\";\nimport Countries from \"./Countries\";\nimport styles from \"./Styling.module.css\";\n\nconst MainPage = () => {\n    return <>\n        <PageWrapper>\n            <div className={styles.countriesWrapper}>\n                <Countries className={styles.countries} />\n            </div>\n        </PageWrapper>\n    </>\n}\n\nexport default MainPage","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./Styling.module.css\";\nimport { Link } from \"react-router-dom\";\n// import styles from \"./Styling.module.css\";\n\nconst CountriesDetails = () => {\n  const { id } = useParams();\n  const [country, setCountry] = useState([]);\n  useEffect(() => {\n    fetch(`https://restcountries.com/v2/all/?id=${id}`)\n      .then((r) => r.json())\n      .then((country) => {\n        const arrayCountries = country\n          ? Object.keys(country).map((key) => {\n              return {\n                id: key,\n                ...country[key],\n              };\n            })\n          : [];\n        setCountry(arrayCountries);\n        console.log(arrayCountries);\n      });\n  }, [id]);\n  return (\n    <>\n      <div className={styles.container}>\n        <Link to=\"/countries-app\">\n          {\" \"}\n          <button className={styles.borderButton} style={{ margin: \"1rem\" }}>\n            Go Back\n          </button>\n        </Link>\n       \n\n        {country.map(\n          (country) =>\n            country.id.toString() === id && (\n              <>\n                <div className={styles.countryWrapper}>\n                  <div className={styles.countryImgWrapper}>\n                    <img src={country.flag} alt=\"country\"/>\n                  </div>\n                  <div className={styles.countryRightWrapper}>\n                    <div className={styles.countryTitle}>\n                      <h2>{country.name}</h2>\n                    </div>\n                    <div className={styles.countryTxtWrapper}>\n                      <div className={styles.countryFirstCol}>\n                        <p>\n                          <b>Native Name:</b> {country.nativeName}\n                        </p>\n                        <p>\n                          <b>Capital:</b> {country.capital}\n                        </p>\n                        <p>\n                          <b>Region:</b> {country.region}\n                        </p>\n                      </div>\n                      <div className={styles.countrySecCol}>\n                        <p>\n                          <b>Currency:</b>{\" \"}\n                          {country.currencies.map((courency) => (\n                            <span style={{ padding: \"0.5rem\" }}>\n                              {courency.name}\n                            </span>\n                          ))}\n                        </p>\n                        <p>\n                          <b>Languages:</b>{\" \"}\n                          {country.languages.map((language) => (\n                            <span style={{ padding: \"0.5rem\" }}>\n                              {language.name}\n                            </span>\n                          ))}\n                        </p>\n                        <p>\n                          <b>Borders:</b>{\" \"}\n                          {country.borders ? country.borders.map((border) => {\n                            return (\n                              <>\n                                <button className={styles.borderButton}>\n                                  {border}\n                                </button>\n                              </>\n                            );\n                            \n                          })\n                          : <span>None</span>\n                        }\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </>\n            )\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CountriesDetails;\n","import React from \"react\";\n\nimport MainPage from \"./MainPage\";\nimport CountriesDetails from \"./CountriesDetails\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst Content = () => {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/countries-app\" component={MainPage} />\n        <Route path=\"/countries-app/:id\" component={CountriesDetails} />\n      </Switch>\n    </>\n  );\n};\n\nexport default Content;\n","import React from \"react\";\nimport Nav from \"./components/Nav\";\nimport Content from \"./components/Content\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <>\n      <Router>\n        <Nav />\n        <Content />\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}